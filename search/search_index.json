{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"PodNotes The one goal for PodNotes is to make it easier to write notes on podcasts. Here are the features that will help you do that \ud83d\udc47. Features Mobile friendly Podcast player built into Obsidian Add any publicly available podcast through search, or custom feeds by URL Track played episodes & playback progress Create podcast notes from templates with metadata about episodes Capture timestamps & link directly to the time in the episode Download episodes for offline playback Support for non-podcast local audio files API that can be used by plugins like QuickAdd or Templater for custom workflows Installation This plugin is in the Obsidian community plugin store. You can find it by searching in the store, or by clicking here . Installation with BRAT BRAT is an Obsidian plugin that helps you test beta plugins and themes. Click here to install it in Obsidian. Add chhoumann/PodNotes to BRAT with the Add a beta plugin for testing command. Now follow the appropriate instructions, which most likely will have you go and enable the plugin once it has finished installing. Manual installation Go to the releases page. Download main.js and manifest.json . Create a new directory in your Obsidian vaults .obsidian/plugins/ folder called podnotes and place the downloaded files there. Now refresh the plugins in Obsidian and enable PodNotes. Screenshots Demo Podcast Grid Episode List Player Podcast Note Editing Podcast search","title":"Home"},{"location":"#podnotes","text":"The one goal for PodNotes is to make it easier to write notes on podcasts. Here are the features that will help you do that \ud83d\udc47.","title":"PodNotes"},{"location":"#features","text":"Mobile friendly Podcast player built into Obsidian Add any publicly available podcast through search, or custom feeds by URL Track played episodes & playback progress Create podcast notes from templates with metadata about episodes Capture timestamps & link directly to the time in the episode Download episodes for offline playback Support for non-podcast local audio files API that can be used by plugins like QuickAdd or Templater for custom workflows","title":"Features"},{"location":"#installation","text":"This plugin is in the Obsidian community plugin store. You can find it by searching in the store, or by clicking here .","title":"Installation"},{"location":"#installation-with-brat","text":"BRAT is an Obsidian plugin that helps you test beta plugins and themes. Click here to install it in Obsidian. Add chhoumann/PodNotes to BRAT with the Add a beta plugin for testing command. Now follow the appropriate instructions, which most likely will have you go and enable the plugin once it has finished installing.","title":"Installation with BRAT"},{"location":"#manual-installation","text":"Go to the releases page. Download main.js and manifest.json . Create a new directory in your Obsidian vaults .obsidian/plugins/ folder called podnotes and place the downloaded files there. Now refresh the plugins in Obsidian and enable PodNotes.","title":"Manual installation"},{"location":"#screenshots","text":"","title":"Screenshots"},{"location":"#demo","text":"","title":"Demo"},{"location":"#podcast-grid","text":"","title":"Podcast Grid"},{"location":"#episode-list","text":"","title":"Episode List"},{"location":"#player","text":"","title":"Player"},{"location":"#podcast-note-editing","text":"","title":"Podcast Note Editing"},{"location":"#podcast-search","text":"","title":"Podcast search"},{"location":"QuickAdd/","text":"QuickAdd I have made some QuickAdd macros & actions that might be helpful to others. Both of these are seen in the demo: Timestamp capture This is how I capture timestamps so fast in the demo. You can make a Capture action like so: The capture format is as follows: \\n- **```js quickadd const pn = this.app.plugins.plugins.podnotes.api; return pn.getPodcastTimeFormatted(\"HH:mm:ss\", true); ```** | This captures a new line with the current time, linked to the current podcast, in the active file. Add podcast note This is how I add podcast notes with QuickAdd. First, you will need my template. --- tags: in/podcast state/process aliases: - \"{{VALUE:title}}\" cssclass: null image: {{VALUE:artworkUrl}} --- # {{VALUE:title}} ### Metadata Type:: [[%]] Tags:: Podcast:: [[{{VALUE:podcastName}}]] Title:: {{VALUE:title}} URL:: {{VALUE:url}} Guest:: Reference:: Reviewed Date:: ==UPDATE THIS== ### Description > {{VALUE:description}} --- ## Notes Now, you should make a macro with the following script: module.exports = { entry: (params, settings) => { const pn = params.app.plugins.plugins.podnotes.api; const podcast = pn.podcast; if (!podcast) { new Notice(\"No podcast loaded.\", 5000); throw new Error(); } params.variables = { ...podcast, ...params.variables, safeTitle: replaceIllegalFileNameCharactersInString(podcast.title), }; }, settings: { name: 'Podcast Script', author: 'Christian', options: { } } } function replaceIllegalFileNameCharactersInString(string) { return string .replace(/[\\\\,#%&\\{\\}\\/*<>$\\'\\\":@\\u2023\\|\\?]*/g, '') // Replace illegal file name characters with empty string .replace(/\\n/, ' ') // replace newlines with spaces .replace(' ', ' '); // replace multiple spaces with single space to make sure we don't have double spaces in the file name } First, create a new macro in the macro panel. This is accessed by clicking Manage Macros . Add a macro with any name you like. Now, add the script as the first step and the template as the second step. Adding these requires that the script and template is saved as files in your Obsidian vault. Their file names are up to you, but ensure that they end in .js and .md, for the script and template respectively. Once you have created the macro in the macro panel, you should add a macro action to the QuickAdd menu. This is done from the main QuickAdd settings. You should see an input field where you can input the name of the macro choice. Right next to it is a dropdown menu with the type of choice you'd like to add\u2014select macro here. Then click Add Choice . Once the choice has been added, you should see the macro in the QuickAdd menu in the settings panel. Click the cogwheel next to the macro choice to edit the macro. You'll want to select the appropriate macro that you created in the macros panel. Notably, we distinguish between a macro and a macro choice. Selecting a macro in the menu that pops up 'links' it to the macro choice, so the macro choice can execute the macro. My settings for the Template action/step in the macro are as follows: Which means that it creates a file with the podcast episode title as the file name in the inputs/podcasts folder, and then opens the file after. Ultimately, activating the macro will lead to notes like this one. If you want more information / guidance on how to use QuickAdd, you can check out the QuickAdd documentation . You can also check out the video I made to help you get started with QuickAdd . There are also similar use cases to this one, which all have similar instructions for installation. These may help: How I Import Literature Notes into Obsidian Macro: Zettelizer - easily create new notes from headings while keeping the contents in the file Macro: Toggl Manager - set preset Toggl Track time entries and start them from Obsidian Macro: Fetching movies and TV shows into your vault","title":"Usage with QuickAdd"},{"location":"QuickAdd/#quickadd","text":"I have made some QuickAdd macros & actions that might be helpful to others. Both of these are seen in the demo:","title":"QuickAdd"},{"location":"QuickAdd/#timestamp-capture","text":"This is how I capture timestamps so fast in the demo. You can make a Capture action like so: The capture format is as follows: \\n- **```js quickadd const pn = this.app.plugins.plugins.podnotes.api; return pn.getPodcastTimeFormatted(\"HH:mm:ss\", true); ```** | This captures a new line with the current time, linked to the current podcast, in the active file.","title":"Timestamp capture"},{"location":"QuickAdd/#add-podcast-note","text":"This is how I add podcast notes with QuickAdd. First, you will need my template. --- tags: in/podcast state/process aliases: - \"{{VALUE:title}}\" cssclass: null image: {{VALUE:artworkUrl}} --- # {{VALUE:title}} ### Metadata Type:: [[%]] Tags:: Podcast:: [[{{VALUE:podcastName}}]] Title:: {{VALUE:title}} URL:: {{VALUE:url}} Guest:: Reference:: Reviewed Date:: ==UPDATE THIS== ### Description > {{VALUE:description}} --- ## Notes Now, you should make a macro with the following script: module.exports = { entry: (params, settings) => { const pn = params.app.plugins.plugins.podnotes.api; const podcast = pn.podcast; if (!podcast) { new Notice(\"No podcast loaded.\", 5000); throw new Error(); } params.variables = { ...podcast, ...params.variables, safeTitle: replaceIllegalFileNameCharactersInString(podcast.title), }; }, settings: { name: 'Podcast Script', author: 'Christian', options: { } } } function replaceIllegalFileNameCharactersInString(string) { return string .replace(/[\\\\,#%&\\{\\}\\/*<>$\\'\\\":@\\u2023\\|\\?]*/g, '') // Replace illegal file name characters with empty string .replace(/\\n/, ' ') // replace newlines with spaces .replace(' ', ' '); // replace multiple spaces with single space to make sure we don't have double spaces in the file name } First, create a new macro in the macro panel. This is accessed by clicking Manage Macros . Add a macro with any name you like. Now, add the script as the first step and the template as the second step. Adding these requires that the script and template is saved as files in your Obsidian vault. Their file names are up to you, but ensure that they end in .js and .md, for the script and template respectively. Once you have created the macro in the macro panel, you should add a macro action to the QuickAdd menu. This is done from the main QuickAdd settings. You should see an input field where you can input the name of the macro choice. Right next to it is a dropdown menu with the type of choice you'd like to add\u2014select macro here. Then click Add Choice . Once the choice has been added, you should see the macro in the QuickAdd menu in the settings panel. Click the cogwheel next to the macro choice to edit the macro. You'll want to select the appropriate macro that you created in the macros panel. Notably, we distinguish between a macro and a macro choice. Selecting a macro in the menu that pops up 'links' it to the macro choice, so the macro choice can execute the macro. My settings for the Template action/step in the macro are as follows: Which means that it creates a file with the podcast episode title as the file name in the inputs/podcasts folder, and then opens the file after. Ultimately, activating the macro will lead to notes like this one. If you want more information / guidance on how to use QuickAdd, you can check out the QuickAdd documentation . You can also check out the video I made to help you get started with QuickAdd . There are also similar use cases to this one, which all have similar instructions for installation. These may help: How I Import Literature Notes into Obsidian Macro: Zettelizer - easily create new notes from headings while keeping the contents in the file Macro: Toggl Manager - set preset Toggl Track time entries and start them from Obsidian Macro: Fetching movies and TV shows into your vault","title":"Add podcast note"},{"location":"api/","text":"API export interface IAPI { readonly podcast: Episode; readonly isPlaying: boolean; readonly length: number; currentTime: number; getPodcastTimeFormatted(format: string, linkify?: boolean): string; start(): void; stop(): void; } The above functions are all accessible through app.plugins.plugins.podnotes.api . podcast This returns the currently playing episode. export interface Episode { title: string, streamUrl: string url: string, description: string, podcastName: string, feedUrl?: string, artworkUrl?: string; episodeDate?: Date; } getPodcastTimeFormatted(format: string, linkify?: boolean) This function will return the current playback time formatted according to the given (moment) format. If linkify is true, the time will be linked to the current episode at the given time. This is used by PodNotes to play from the recorded time.","title":"API"},{"location":"api/#api","text":"export interface IAPI { readonly podcast: Episode; readonly isPlaying: boolean; readonly length: number; currentTime: number; getPodcastTimeFormatted(format: string, linkify?: boolean): string; start(): void; stop(): void; } The above functions are all accessible through app.plugins.plugins.podnotes.api .","title":"API"},{"location":"api/#podcast","text":"This returns the currently playing episode. export interface Episode { title: string, streamUrl: string url: string, description: string, podcastName: string, feedUrl?: string, artworkUrl?: string; episodeDate?: Date; }","title":"podcast"},{"location":"api/#getpodcasttimeformattedformat-string-linkify-boolean","text":"This function will return the current playback time formatted according to the given (moment) format. If linkify is true, the time will be linked to the current episode at the given time. This is used by PodNotes to play from the recorded time.","title":"getPodcastTimeFormatted(format: string, linkify?: boolean)"},{"location":"local_files/","text":"PodNotes supports local files. You can right-click any audio file and click Play with PodNotes . In the podcast grid, you will see a playlist with a folder icon. This is a playlist consisting of all local files (non-downloaded episodes) you have played with PodNotes. PodNotes will attempt to treat all local files as podcast episodes. This means all standard features are available, such as timestamps, note creation, and persisting playback time. Any exceptions will be added here.","title":"Local files"},{"location":"podcasts/","text":"Adding podcasts You can add podcasts by searching for them in the podcast search box in settings. This searches the iTunes podcast repository. It is also possible to add custom podcast feeds by pasting the feed URL in the search box. PodNotes will try to parse the feed, and if successful, will prompt you to add it to your saved feeds. Playlists PodNotes can create playlists, which are lists of episodes. For each playlist, you can specify a name and an icon. The playlists are shown in the episode grid, represented by their icons. By default, you will have a queue playlist and a favorites playlist. You can delete playlists by pressing the trash bin icon next to the playlist name. The icon will change to a checkmark, which should be pressed within a short duration to confirm the deletion. Episode list The episode list is a dynamic view, which will change depending on your selection. If you have no podcast selected, the episode list will show the latest episodes of all your saved feeds. If you have a podcast selected, the episode list will show all episodes of that podcast. And lastly, if you select a playlist, the episode list shows all episodes in that playlist. Context menu You can right-click (desktop) or long-press (mobile) on an episode in the episode list to open the context menu. The context menu will let you Play the episode Mark the episode as played Download / remove the episode Add / remove the episode to favorites Add / remove the episode to queue Add / remove the episode to a playlist Player The player will automatically load and play the current episode. Clicking on the epsiode image will toggle episode playback. The player also features a progress bar, which you can use to seek to a specific time in the episode. You can also press the buttons on the player to skip backwards or forwards in the episode. Episode playback rate can be controlled by using the playback rate slider. This is, by default, what you have set in the settings.","title":"Podcasts"},{"location":"podcasts/#adding-podcasts","text":"You can add podcasts by searching for them in the podcast search box in settings. This searches the iTunes podcast repository. It is also possible to add custom podcast feeds by pasting the feed URL in the search box. PodNotes will try to parse the feed, and if successful, will prompt you to add it to your saved feeds.","title":"Adding podcasts"},{"location":"podcasts/#playlists","text":"PodNotes can create playlists, which are lists of episodes. For each playlist, you can specify a name and an icon. The playlists are shown in the episode grid, represented by their icons. By default, you will have a queue playlist and a favorites playlist. You can delete playlists by pressing the trash bin icon next to the playlist name. The icon will change to a checkmark, which should be pressed within a short duration to confirm the deletion.","title":"Playlists"},{"location":"podcasts/#episode-list","text":"The episode list is a dynamic view, which will change depending on your selection. If you have no podcast selected, the episode list will show the latest episodes of all your saved feeds. If you have a podcast selected, the episode list will show all episodes of that podcast. And lastly, if you select a playlist, the episode list shows all episodes in that playlist.","title":"Episode list"},{"location":"podcasts/#context-menu","text":"You can right-click (desktop) or long-press (mobile) on an episode in the episode list to open the context menu. The context menu will let you Play the episode Mark the episode as played Download / remove the episode Add / remove the episode to favorites Add / remove the episode to queue Add / remove the episode to a playlist","title":"Context menu"},{"location":"podcasts/#player","text":"The player will automatically load and play the current episode. Clicking on the epsiode image will toggle episode playback. The player also features a progress bar, which you can use to seek to a specific time in the episode. You can also press the buttons on the player to skip backwards or forwards in the episode. Episode playback rate can be controlled by using the playback rate slider. This is, by default, what you have set in the settings.","title":"Player"},{"location":"templates/","text":"PodNotes can create notes from templates. These templates can contain certain syntax, which will be expanded to metadata about the podcast episode you are listening to. To use templates, you can use the Create podcast note Obsidian command. This requires you to have defined a template for both the file path and note text. File path This template will be used to create the file path for the note. You can use the following syntax: {{title}} : The title of the podcast episode. {{podcast}} : The name of the podcast. Both syntax items will be formatted such that it is safe to use in a file path. This means the following characters will be removed: \\ , # % & / { } * < > $ ' \" : @ \u2023 | ? . Note template This template will be used to create the note text. You can use the following syntax: {{title}} : The title of the podcast episode. {{description}} : The description of the podcast episode. You can use {{description:> }} to prepend each new line with a > (to put the entire description in a blockquote). {{podcast}} : The name of the podcast. {{url}} : The URL of the podcast episode. {{date}} : The publish date of the podcast episode. You can use {{date:format}} to specify a custom Moment.js format. E.g. {{date:YYYY-MM-DD}} . {{artwork}} : The URL of the podcast artwork. If no artwork is found, an empty string will be used.","title":"Templates"},{"location":"templates/#file-path","text":"This template will be used to create the file path for the note. You can use the following syntax: {{title}} : The title of the podcast episode. {{podcast}} : The name of the podcast. Both syntax items will be formatted such that it is safe to use in a file path. This means the following characters will be removed: \\ , # % & / { } * < > $ ' \" : @ \u2023 | ? .","title":"File path"},{"location":"templates/#note-template","text":"This template will be used to create the note text. You can use the following syntax: {{title}} : The title of the podcast episode. {{description}} : The description of the podcast episode. You can use {{description:> }} to prepend each new line with a > (to put the entire description in a blockquote). {{podcast}} : The name of the podcast. {{url}} : The URL of the podcast episode. {{date}} : The publish date of the podcast episode. You can use {{date:format}} to specify a custom Moment.js format. E.g. {{date:YYYY-MM-DD}} . {{artwork}} : The URL of the podcast artwork. If no artwork is found, an empty string will be used.","title":"Note template"},{"location":"timestamps/","text":"Timestamps can be created with the Capture Timestamp Obsidian command. This will make PodNotes capture the current playback time to the active note, in the format given in the plugin settings. Settings For timestamps, you can use the following format strings: {{time}} : The current playback time. Default format is HH:mm:ss . {{linktime}} : The current playback time, formatted as a link to the current episode. Default format is HH:mm:ss . Both of these allow for custom formatting. By using {{time:format}} or {{linktime:format}} , you can specify a custom Moment.js format. For example, you might use {{time:H\\h mm\\m ss\\s}} to get the time in the format 0h 20m 37s .","title":"Timestamps"},{"location":"timestamps/#settings","text":"For timestamps, you can use the following format strings: {{time}} : The current playback time. Default format is HH:mm:ss . {{linktime}} : The current playback time, formatted as a link to the current episode. Default format is HH:mm:ss . Both of these allow for custom formatting. By using {{time:format}} or {{linktime:format}} , you can specify a custom Moment.js format. For example, you might use {{time:H\\h mm\\m ss\\s}} to get the time in the format 0h 20m 37s .","title":"Settings"}]}